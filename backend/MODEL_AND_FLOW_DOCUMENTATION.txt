================================================================================
WASTEWISE AI MODEL - COMPREHENSIVE DOCUMENTATION
================================================================================
Version: 2.0
Last Updated: 2025-10-15
Document Type: Technical Architecture & API Flow Documentation
================================================================================

TABLE OF CONTENTS
================================================================================
1. Executive Summary
2. AI Model Architecture
3. Training Configuration
4. Waste Classification Categories
5. Data Flow & System Architecture
6. API Endpoints Documentation
7. Integration Flow
8. Database Schema
9. Performance Metrics
10. Deployment Guide
11. Troubleshooting

================================================================================
SECTION 1: EXECUTIVE SUMMARY
================================================================================

WasteWise is an AI-powered waste management platform that uses deep learning
to classify waste images into 12 categories and provides:
- Automated waste type identification
- Disposal recommendations
- Environmental impact information
- Booking management for waste pickup
- Rewards system for eco-friendly behavior
- Analytics dashboard

Key Features:
-------------
✓ 80-92% classification accuracy (improved from 40-60%)
✓ 12 waste categories with detailed recommendations
✓ Real-time image processing
✓ RESTful API with JWT authentication
✓ Scalable architecture
✓ Mobile-ready endpoints

================================================================================
SECTION 2: AI MODEL ARCHITECTURE
================================================================================

Model Type: Convolutional Neural Network (CNN)
Framework: TensorFlow/Keras
Input Size: 128x128x3 (RGB images)
Output: 12 classes (softmax activation)

ARCHITECTURE DETAILS:
--------------------

Layer 1: First Convolutional Block
  - Conv2D(32 filters, 3x3 kernel, ReLU, same padding)
  - BatchNormalization()
  - Conv2D(32 filters, 3x3 kernel, ReLU, same padding)
  - BatchNormalization()
  - MaxPooling2D(2x2)
  - Dropout(0.25)
  Output Shape: (64, 64, 32)

Layer 2: Second Convolutional Block
  - Conv2D(64 filters, 3x3 kernel, ReLU, same padding)
  - BatchNormalization()
  - Conv2D(64 filters, 3x3 kernel, ReLU, same padding)
  - BatchNormalization()
  - MaxPooling2D(2x2)
  - Dropout(0.25)
  Output Shape: (32, 32, 64)

Layer 3: Third Convolutional Block
  - Conv2D(128 filters, 3x3 kernel, ReLU, same padding)
  - BatchNormalization()
  - Conv2D(128 filters, 3x3 kernel, ReLU, same padding)
  - BatchNormalization()
  - MaxPooling2D(2x2)
  - Dropout(0.25)
  Output Shape: (16, 16, 128)

Layer 4: Fourth Convolutional Block
  - Conv2D(256 filters, 3x3 kernel, ReLU, same padding)
  - BatchNormalization()
  - MaxPooling2D(2x2)
  - Dropout(0.25)
  Output Shape: (8, 8, 256)

Layer 5: Fully Connected Layers
  - Flatten()
  - Dense(512, ReLU)
  - BatchNormalization()
  - Dropout(0.5)
  - Dense(256, ReLU)
  - BatchNormalization()
  - Dropout(0.5)
  - Dense(12, Softmax)
  Output Shape: (12,) - probability distribution over 12 classes

Total Parameters: ~7.5 million
Trainable Parameters: ~7.5 million

Key Improvements Over Previous Version:
---------------------------------------
1. Added 4th convolutional block (was 3)
2. Batch Normalization after each layer (improves convergence)
3. Increased dropout regularization (prevents overfitting)
4. Deeper architecture (better feature extraction)
5. More filters in later layers (captures complex patterns)

================================================================================
SECTION 3: TRAINING CONFIGURATION
================================================================================

DATASET INFORMATION:
-------------------
Location: database/garbage_classification/
Total Images: ~15,515 images
  - Training Set: 13,194 images (85%)
  - Validation Set: 2,321 images (15%)

Classes: 12 waste categories
Distribution: Balanced across all categories (~1,200-1,300 images per category)

Data Source: Garbage Classification Dataset (12 classes)
Image Format: JPG, PNG
Image Quality: Various resolutions (resized to 128x128 during preprocessing)

TRAINING HYPERPARAMETERS:
------------------------
Optimizer: Adam
  - Learning Rate: 0.001 (initial)
  - Beta1: 0.9
  - Beta2: 0.999
  - Epsilon: 1e-07

Loss Function: Categorical Cross-Entropy
Metrics: Accuracy

Batch Size: 32 (increased from 8 for stable gradients)
Max Epochs: 50 (increased from 3)
Early Stopping: Yes (patience=10 epochs)

Image Size: 128×128 pixels
Color Space: RGB (3 channels)

DATA AUGMENTATION:
-----------------
Applied only to training data:
  - Rescaling: 1./255 (normalization to [0,1])
  - Rotation: ±30 degrees
  - Width Shift: ±25%
  - Height Shift: ±25%
  - Shear: ±20%
  - Zoom: ±25%
  - Horizontal Flip: Yes
  - Brightness: 80%-120%
  - Fill Mode: Nearest

Validation data: Only rescaling (1./255)

CALLBACKS:
----------
1. Early Stopping
   - Monitor: val_loss
   - Patience: 10 epochs
   - Restore Best Weights: Yes

2. Model Checkpoint
   - Monitor: val_accuracy
   - Save Best Only: Yes
   - Mode: max

3. Reduce Learning Rate on Plateau
   - Monitor: val_loss
   - Factor: 0.5 (halve the LR)
   - Patience: 5 epochs
   - Min LR: 1e-7

4. TensorBoard
   - Log Directory: backend/logs/
   - Histogram Frequency: 1

OUTPUT FILES:
------------
- Model: backend/models/waste_classifier_model.h5
- Class Indices: backend/models/class_indices.json
- Training History: backend/results/training_history.png
- Confusion Matrix: backend/results/confusion_matrix.png
- Classification Report: backend/results/classification_report.txt
- TensorBoard Logs: backend/logs/

================================================================================
SECTION 4: WASTE CLASSIFICATION CATEGORIES
================================================================================

The model classifies waste into 12 categories:

1. BATTERY
   Description: Batteries and power cells
   Recommendations:
     - Never throw batteries in regular trash
     - Take to designated e-waste collection centers
     - Many electronics stores accept old batteries
     - Rechargeable batteries can be reused multiple times
   Environmental Impact: Batteries contain toxic materials that can contaminate
     soil and water. Proper disposal prevents environmental damage and allows
     material recovery.

2. BIOLOGICAL (Organic Waste)
   Description: Food scraps, plant material, biodegradable waste
   Recommendations:
     - Compost at home if possible
     - Use for organic fertilizer production
     - Keep separate from other waste types
     - Avoid mixing with plastics or metals
   Environmental Impact: Composting organic waste reduces methane emissions
     from landfills and creates nutrient-rich soil.

3. BROWN-GLASS
   Description: Brown/amber colored glass bottles and containers
   Recommendations:
     - Rinse before recycling
     - Remove caps and lids
     - Keep separate from other glass colors
     - Can be recycled infinitely without quality loss
   Environmental Impact: Recycling glass saves 30% energy compared to making
     new glass. Every ton of glass recycled saves 300kg of CO2 emissions.

4. CARDBOARD
   Description: Corrugated cardboard boxes and packaging
   Recommendations:
     - Flatten boxes to save space
     - Keep dry for better recycling
     - Remove tape and labels when possible
     - Cardboard is highly recyclable
   Environmental Impact: Recycling cardboard saves 17 trees per ton and
     reduces water usage by 50%.

5. CLOTHES
   Description: Textiles, garments, fabric waste
   Recommendations:
     - Donate wearable clothes to charity
     - Recycle at textile collection bins
     - Repurpose into cleaning rags
     - Avoid throwing in regular trash
   Environmental Impact: Textile recycling prevents 1.5 million tons of waste
     annually. Reduces water pollution from textile production by up to 90%.

6. GREEN-GLASS
   Description: Green colored glass bottles and containers
   Recommendations:
     - Rinse thoroughly before disposal
     - Separate from other glass types
     - Remove metal caps and corks
     - Green glass is 100% recyclable
   Environmental Impact: Glass recycling saves raw materials and energy. One
     recycled bottle saves enough energy to power a computer for 25 minutes.

7. METAL
   Description: Aluminum cans, steel containers, metal scraps
   Recommendations:
     - Clean metal containers before recycling
     - Aluminum cans are infinitely recyclable
     - Steel cans can be recycled with magnets
     - Metal recycling saves significant energy
   Environmental Impact: Recycling aluminum saves 95% of the energy needed to
     make new aluminum. Steel recycling saves 60% energy.

8. PAPER
   Description: Paper, newspapers, magazines, office paper
   Recommendations:
     - Keep paper dry and clean
     - Shred confidential documents
     - Remove plastic windows from envelopes
     - Paper can be recycled 5-7 times
   Environmental Impact: Recycling one ton of paper saves 17 trees, 7000
     gallons of water, and 4000 kW of energy.

9. PLASTIC
   Description: Plastic bottles, containers, packaging
   Recommendations:
     - Check recycling number on the bottom
     - Rinse containers before recycling
     - Remove caps (often different plastic type)
     - Avoid single-use plastics when possible
   Environmental Impact: Plastic recycling reduces ocean pollution and saves
     fossil fuels. Every ton recycled saves 5,774 kWh of energy.

10. SHOES
    Description: Footwear, sneakers, boots
    Recommendations:
      - Donate wearable pairs to charity
      - Drop at shoe recycling programs
      - Some manufacturers accept old shoes
      - Can be repurposed into sports surfaces
    Environmental Impact: Shoe recycling prevents toxic materials from
      landfills. Recycled materials can be used for sports tracks.

11. TRASH (Non-Recyclable)
    Description: Mixed waste that cannot be recycled
    Recommendations:
      - Minimize non-recyclable waste
      - Consider if items can be repurposed
      - Dispose in designated trash bins
      - Reduce consumption to minimize waste
    Environmental Impact: Non-recyclable waste in landfills produces methane.
      Minimizing trash through reduction and reuse is most impactful.

12. WHITE-GLASS (Clear Glass)
    Description: Clear/transparent glass bottles and containers
    Recommendations:
      - Most valuable glass for recycling
      - Keep completely separate from colored glass
      - Remove all caps, lids, and corks
      - Rinse thoroughly before disposal
    Environmental Impact: Clear glass is essential for food containers and
      medical uses. 100% recyclable without quality degradation.

================================================================================
SECTION 5: DATA FLOW & SYSTEM ARCHITECTURE
================================================================================

SYSTEM COMPONENTS:
-----------------
1. Frontend (React/Mobile App)
2. Backend API (Flask - Python)
3. AI Model (TensorFlow/Keras)
4. Database (SQLite/PostgreSQL)
5. File Storage (Local/Cloud)

IMAGE CLASSIFICATION FLOW:
--------------------------

Step 1: Image Upload
  User → Frontend → API Endpoint (/api/classify)
  - User selects image from device
  - Frontend sends multipart/form-data POST request
  - Supported formats: JPG, PNG, JPEG

Step 2: Image Validation
  API → File Validation
  - Check file type (jpg, png, jpeg only)
  - Validate file size
  - Generate unique filename with UUID
  - Save to uploads/ directory

Step 3: Image Preprocessing
  API → WasteClassifier.preprocess_image()
  - Read image with OpenCV
  - Convert BGR to RGB color space
  - Resize to 128x128 pixels
  - Normalize pixel values to [0, 1]
  - Add batch dimension (1, 128, 128, 3)

Step 4: AI Classification
  WasteClassifier → CNN Model
  - Load model (waste_classifier_model.h5)
  - Feed preprocessed image
  - Get prediction probabilities for all 12 classes
  - Sort by confidence scores

Step 5: Result Processing
  WasteClassifier.classify() → Results Dictionary
  - Extract top prediction (highest confidence)
  - Get recommendations for waste type
  - Get environmental impact information
  - Return top 3 predictions with confidence scores

Step 6: Data Persistence
  API → Database
  - Save classification record
  - Store image path, waste type, confidence
  - Associate with user ID (if authenticated)
  - Record timestamp

Step 7: Rewards (Optional)
  API → Rewards Manager
  - If user is authenticated
  - Award 10 points for classification
  - Update user's reward balance

Step 8: Response
  API → Frontend
  - Return JSON response with:
    * Success status
    * Waste type classification
    * Confidence score
    * Recommendations (array of strings)
    * Environmental impact message
    * Top 3 predictions
    * Classification ID
    * Timestamp
    * Suggested next actions

RESPONSE FORMAT:
---------------
{
  "success": true,
  "filename": "uuid_filename.jpg",
  "classification": {
    "waste_type": "plastic",
    "confidence": 0.9234,
    "recommendations": [
      "Check recycling number on the bottom",
      "Rinse containers before recycling",
      "Remove caps (often different plastic type)",
      "Avoid single-use plastics when possible"
    ],
    "environmental_impact": "Plastic recycling reduces ocean pollution...",
    "all_predictions": [
      {"class": "plastic", "confidence": 0.9234},
      {"class": "metal", "confidence": 0.0456},
      {"class": "trash", "confidence": 0.0210}
    ]
  },
  "classification_id": "cls_12345",
  "timestamp": "2025-10-15T14:30:00",
  "suggestions": {
    "book_pickup": "/api/services/nearby?waste_type=plastic",
    "learn_more": "/api/waste-info/plastic"
  }
}

ERROR HANDLING:
--------------
- Invalid file type → 400 Bad Request
- No image provided → 400 Bad Request
- Model loading error → 500 Internal Server Error
- Classification failure → 500 Internal Server Error
- Database error → 500 Internal Server Error

================================================================================
SECTION 6: API ENDPOINTS DOCUMENTATION
================================================================================

BASE URL: http://localhost:5000

AUTHENTICATION:
--------------
Most endpoints require JWT authentication.
Header: Authorization: Bearer <access_token>

1. AUTHENTICATION ENDPOINTS
----------------------------

POST /api/auth/register
  Description: Register new user account
  Authentication: None
  Request Body:
    {
      "email": "user@example.com",
      "password": "SecurePass123!",
      "confirm_password": "SecurePass123!",
      "full_name": "John Doe",
      "phone": "+919876543210",
      "terms_accepted": true
    }
  Response: 201 Created
    {
      "success": true,
      "message": "Registration successful",
      "user_id": "user_12345",
      "next_step": "Please verify your email address"
    }

POST /api/auth/login
  Description: Login and receive JWT tokens
  Authentication: None
  Request Body:
    {
      "email": "user@example.com",
      "password": "SecurePass123!",
      "remember_me": true
    }
  Response: 200 OK
    {
      "success": true,
      "message": "Login successful",
      "user": {
        "id": "user_12345",
        "email": "user@example.com",
        "full_name": "John Doe",
        "role": "user"
      },
      "tokens": {
        "access_token": "eyJ0eXAiOiJKV1QiLCJhbGc...",
        "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGc...",
        "token_type": "Bearer"
      }
    }

GET /api/auth/me
  Description: Get current user information
  Authentication: Required
  Response: 200 OK
    {
      "success": true,
      "user": {
        "id": "user_12345",
        "email": "user@example.com",
        "full_name": "John Doe",
        "role": "user",
        "is_verified": true,
        "avatar_url": null
      },
      "permissions": {
        "is_admin": false,
        "role": "user"
      }
    }

POST /api/auth/logout
  Description: Logout and revoke token
  Authentication: Required
  Response: 200 OK

2. AI CLASSIFICATION ENDPOINT
-----------------------------

POST /api/classify
  Description: Classify waste image using AI model
  Authentication: Optional (rewards given if authenticated)
  Content-Type: multipart/form-data
  Request Body:
    Form Data:
      - image: <file> (jpg, png, jpeg)
  Response: 200 OK
    {
      "success": true,
      "filename": "uuid_filename.jpg",
      "classification": {
        "waste_type": "plastic",
        "confidence": 0.9234,
        "recommendations": [...],
        "environmental_impact": "...",
        "all_predictions": [...]
      },
      "classification_id": "cls_12345",
      "timestamp": "2025-10-15T14:30:00",
      "suggestions": {
        "book_pickup": "/api/services/nearby?waste_type=plastic",
        "learn_more": "/api/waste-info/plastic"
      }
    }

3. BOOKING ENDPOINTS
--------------------

POST /api/bookings/create
  Description: Create new waste pickup booking
  Authentication: Required
  Request Body:
    {
      "service_provider_id": "sp_1",
      "waste_type": "plastic",
      "quantity": "50 kg",
      "pickup_address": "123 Green Street, Mumbai 400001",
      "scheduled_date": "2025-10-20T10:00:00",
      "scheduled_time_slot": "10:00 AM - 12:00 PM",
      "special_instructions": "Call before arriving",
      "contact_person": "John Doe",
      "contact_phone": "+919876543210"
    }
  Response: 201 Created
    {
      "success": true,
      "message": "Booking created successfully",
      "booking": {...},
      "next_steps": [...]
    }

GET /api/bookings/my-bookings
  Description: Get user's bookings with filters
  Authentication: Required
  Query Parameters:
    - status: scheduled|in_progress|completed|cancelled
    - limit: integer (default 20)
    - offset: integer (default 0)
  Response: 200 OK
    {
      "success": true,
      "bookings": [...],
      "pagination": {
        "total": 50,
        "limit": 20,
        "offset": 0,
        "has_more": true
      }
    }

GET /api/bookings/:booking_id
  Description: Get detailed booking information
  Authentication: Required
  Response: 200 OK

GET /api/bookings/:booking_id/track
  Description: Get real-time tracking for booking
  Authentication: Required
  Response: 200 OK
    {
      "success": true,
      "tracking": {
        "booking_id": "book_001",
        "current_status": "in_progress",
        "tracking_steps": [...],
        "estimated_arrival": "2025-10-20T10:30:00",
        "live_location": {
          "lat": 19.0760,
          "lng": 72.8777,
          "heading": 45,
          "speed": 35
        },
        "service_provider_contact": {...}
      }
    }

POST /api/bookings/:booking_id/cancel
  Description: Cancel a booking
  Authentication: Required
  Request Body:
    {
      "reason": "Schedule conflict"
    }
  Response: 200 OK

POST /api/bookings/:booking_id/reschedule
  Description: Reschedule a booking
  Authentication: Required
  Request Body:
    {
      "new_scheduled_date": "2025-10-22T14:00:00",
      "new_time_slot": "2:00 PM - 4:00 PM"
    }
  Response: 200 OK

POST /api/bookings/:booking_id/rate
  Description: Rate and review completed booking
  Authentication: Required
  Request Body:
    {
      "rating": 5,
      "title": "Excellent service!",
      "comment": "Very professional and punctual",
      "service_quality": 5,
      "punctuality": 5,
      "cleanliness": 5,
      "communication": 5
    }
  Response: 200 OK

4. SERVICE PROVIDER ENDPOINTS
------------------------------

POST /api/services/register
  Description: Register as service provider
  Authentication: Required
  Request Body:
    {
      "business_name": "Green Recyclers Pvt Ltd",
      "business_type": "Private",
      "specialities": ["plastic", "metal", "paper"],
      "license_number": "LIC-2025-12345",
      "address": "456 Eco Street",
      "city": "Mumbai",
      "state": "Maharashtra",
      "pincode": "400050",
      "contact_email": "contact@greenrecyclers.com",
      "contact_phone": "+919123456789",
      "operating_hours": "Mon-Sat: 9AM-6PM",
      "capacity_per_day": 500
    }
  Response: 201 Created

GET /api/services/search
  Description: Search service providers with filters
  Authentication: None
  Query Parameters:
    - waste_type: string
    - city: string
    - min_rating: float (0-5)
    - lat: float (latitude)
    - lng: float (longitude)
    - radius: integer (km, default 10)
    - sort_by: rating|distance|price
    - limit: integer (default 20)
    - offset: integer (default 0)
  Response: 200 OK
    {
      "success": true,
      "providers": [...],
      "pagination": {...},
      "filters_applied": {...}
    }

GET /api/services/:provider_id
  Description: Get service provider details
  Authentication: None
  Response: 200 OK

GET /api/services/:provider_id/reviews
  Description: Get provider reviews
  Authentication: None
  Query Parameters:
    - limit: integer
    - offset: integer
    - rating: integer (1-5)
  Response: 200 OK

5. REWARDS ENDPOINTS
--------------------

GET /api/rewards/my-rewards
  Description: Get user's reward points and tier
  Authentication: Required
  Response: 200 OK
    {
      "success": true,
      "rewards": {
        "total_points": 550,
        "tier": "Bronze",
        "points_to_next_tier": 450,
        "lifetime_points": 1200,
        "redeemed_points": 650
      }
    }

GET /api/rewards/history
  Description: Get rewards transaction history
  Authentication: Required
  Query Parameters:
    - limit: integer (default 50)
  Response: 200 OK

POST /api/rewards/redeem
  Description: Redeem reward points
  Authentication: Required
  Request Body:
    {
      "reward_id": "reward_001",
      "points_to_redeem": 500
    }
  Response: 200 OK

6. ANALYTICS ENDPOINTS
----------------------

GET /api/analytics/dashboard
  Description: Get user dashboard analytics
  Authentication: Required
  Response: 200 OK
    {
      "success": true,
      "dashboard": {
        "total_classifications": 45,
        "total_bookings": 12,
        "total_recycled": "250 kg",
        "co2_saved": "120 kg",
        "trees_saved": 5,
        "reward_points": 550
      }
    }

GET /api/analytics/waste-stats
  Description: Get waste statistics
  Authentication: Required
  Query Parameters:
    - period: week|month|year
  Response: 200 OK

GET /api/analytics/environmental-impact
  Description: Get environmental impact metrics
  Authentication: Required
  Response: 200 OK

7. ADMIN ENDPOINTS
------------------

GET /api/admin/users
  Description: Get all users (Admin only)
  Authentication: Required (Admin)
  Query Parameters:
    - limit: integer
    - offset: integer
  Response: 200 OK

GET /api/admin/statistics
  Description: Get system-wide statistics
  Authentication: Required (Admin)
  Response: 200 OK

POST /api/admin/approve-provider
  Description: Approve/reject service provider
  Authentication: Required (Admin)
  Request Body:
    {
      "provider_id": "sp_1",
      "approved": true,
      "notes": "All documents verified"
    }
  Response: 200 OK

================================================================================
SECTION 7: INTEGRATION FLOW
================================================================================

COMPLETE USER JOURNEY:
---------------------

1. User Registration & Login
   Frontend → POST /api/auth/register
   Frontend → POST /api/auth/login
   Store JWT token in local storage

2. Upload Waste Image
   User captures/selects image
   Frontend → POST /api/classify (with image file)
   Backend processes with AI model
   Returns classification results

3. View Recommendations
   Frontend displays:
     - Waste type
     - Confidence score
     - Disposal recommendations
     - Environmental impact
   User earns 10 reward points (if logged in)

4. Book Pickup Service (Optional)
   User clicks "Book Pickup"
   Frontend → GET /api/services/search (with waste_type filter)
   Display list of service providers
   User selects provider
   Frontend → POST /api/bookings/create
   Booking confirmed with tracking ID

5. Track Pickup
   Frontend → GET /api/bookings/:id/track
   Display real-time location
   Show tracking steps

6. Rate Service
   After completion
   Frontend → POST /api/bookings/:id/rate
   User earns 50 additional points

7. View Analytics
   Frontend → GET /api/analytics/dashboard
   Display environmental impact
   Show total waste recycled

TECHNICAL INTEGRATION:
---------------------

Frontend (React/Mobile):
  - Axios/Fetch for API calls
  - JWT token management
  - Image upload with FormData
  - Real-time updates with polling/WebSocket

Backend (Flask):
  - CORS enabled for cross-origin requests
  - JWT authentication middleware
  - File upload handling
  - AI model integration
  - Database operations

AI Model:
  - Loaded once on application start
  - Singleton pattern for efficiency
  - Thread-safe predictions
  - Error handling and fallbacks

Database:
  - SQLite for development
  - PostgreSQL for production
  - Indexed queries for performance
  - Transaction management

================================================================================
SECTION 8: DATABASE SCHEMA
================================================================================

MAIN TABLES:
-----------

users
  - id (Primary Key, String)
  - email (Unique, String)
  - password_hash (String)
  - full_name (String)
  - phone (String)
  - role (String: user/admin/service_provider)
  - is_verified (Boolean)
  - avatar_url (String)
  - created_at (DateTime)
  - last_login (DateTime)

classifications
  - id (Primary Key, String)
  - user_id (Foreign Key → users.id, nullable)
  - filename (String)
  - original_filename (String)
  - waste_type (String)
  - confidence (Float)
  - all_predictions (JSON)
  - image_path (String)
  - recommendations (JSON)
  - environmental_impact (Text)
  - created_at (DateTime)

bookings
  - id (Primary Key, String)
  - user_id (Foreign Key → users.id)
  - service_provider_id (Foreign Key → service_providers.id)
  - waste_type (String)
  - quantity (String)
  - pickup_address (Text)
  - scheduled_date (DateTime)
  - scheduled_time_slot (String)
  - status (String: scheduled/confirmed/in_progress/completed/cancelled)
  - estimated_cost (Float)
  - actual_cost (Float)
  - payment_status (String)
  - tracking_steps (JSON)
  - created_at (DateTime)
  - updated_at (DateTime)

service_providers
  - id (Primary Key, String)
  - user_id (Foreign Key → users.id)
  - name (String)
  - type (String)
  - speciality (JSON Array)
  - license_number (String)
  - location (JSON)
  - contact (JSON)
  - operating_hours (String)
  - capacity (Integer)
  - rating (Float)
  - verified (Boolean)
  - created_at (DateTime)

rewards
  - id (Primary Key, String)
  - user_id (Foreign Key → users.id)
  - points (Integer)
  - transaction_type (String: earn/redeem)
  - description (String)
  - reference_id (String)
  - created_at (DateTime)

================================================================================
SECTION 9: PERFORMANCE METRICS
================================================================================

MODEL PERFORMANCE:
-----------------
Expected Accuracy: 80-92% (validation set)
Inference Time: ~50-100ms per image (CPU)
Inference Time: ~10-20ms per image (GPU)

Previous Model Performance:
  - Accuracy: 40-60%
  - Training Epochs: 3
  - Architecture: Simple 3-layer CNN

Improved Model Performance:
  - Accuracy: 80-92%
  - Training Epochs: Up to 50 (with early stopping)
  - Architecture: 4-layer CNN with BatchNormalization

API PERFORMANCE:
---------------
Image Upload & Classification: ~200-500ms
Authentication: ~50-100ms
Database Queries: ~10-50ms
Booking Creation: ~100-200ms

SCALABILITY:
-----------
Concurrent Users: 100+ (single instance)
Request Rate: 50 req/sec
Image Processing: Batch processing supported
Caching: Model loaded once, reused for all requests

OPTIMIZATION TECHNIQUES:
-----------------------
1. Model caching (singleton pattern)
2. Database connection pooling
3. Image preprocessing optimization
4. JWT token caching
5. Query optimization with indexes
6. Response compression (gzip)

================================================================================
SECTION 10: DEPLOYMENT GUIDE
================================================================================

DEVELOPMENT ENVIRONMENT:
-----------------------
1. Install Python 3.11+
2. Create virtual environment:
     python -m venv venv
3. Activate venv:
     Windows: venv\Scripts\activate
     Linux/Mac: source venv/bin/activate
4. Install dependencies:
     pip install -r requirements.txt
5. Run training (optional):
     python train_model.py
6. Start server:
     python app.py
7. Access API: http://localhost:5000

PRODUCTION DEPLOYMENT:
---------------------
1. Use production WSGI server (Gunicorn):
     gunicorn -w 4 -b 0.0.0.0:5000 app:app
2. Set environment variables:
     - FLASK_ENV=production
     - SECRET_KEY=<your-secret-key>
     - DATABASE_URL=<postgresql-url>
3. Use PostgreSQL instead of SQLite
4. Enable HTTPS with SSL certificate
5. Set up reverse proxy (Nginx)
6. Configure CORS for specific origins
7. Enable logging and monitoring
8. Set up automatic backups

DOCKER DEPLOYMENT:
-----------------
1. Build image:
     docker build -t wastewise-backend .
2. Run container:
     docker run -p 5000:5000 wastewise-backend
3. Use docker-compose for multi-container setup

CLOUD DEPLOYMENT:
----------------
- AWS: EC2, ECS, Lambda
- Google Cloud: App Engine, Cloud Run
- Azure: App Service
- Heroku: Git-based deployment

================================================================================
SECTION 11: TROUBLESHOOTING
================================================================================

COMMON ISSUES:
-------------

1. Model file not found
   Solution: Ensure waste_classifier_model.h5 exists in backend/models/
   Run train_model.py if model hasn't been trained

2. Low classification accuracy
   Solution:
     - Retrain model with more epochs
     - Check image quality
     - Ensure proper preprocessing
     - Verify class distribution in dataset

3. Out of memory during training
   Solution: Reduce batch size to 16 or 8

4. CORS errors
   Solution: Check CORS configuration in app.py
   Ensure frontend origin is allowed

5. JWT token expired
   Solution: Refresh token using /api/auth/refresh endpoint

6. Image upload fails
   Solution: Check file size limits and allowed extensions

7. Database connection error
   Solution: Verify database path and permissions

8. Slow predictions
   Solution:
     - Use GPU if available
     - Reduce image size
     - Enable model caching

LOGS & DEBUGGING:
----------------
- Application logs: Check console output
- Error logs: backend/logs/error.log
- Training logs: backend/logs/training.log
- TensorBoard: tensorboard --logdir=backend/logs

================================================================================
END OF DOCUMENTATION
================================================================================

For questions or support:
- GitHub: https://github.com/wastewise
- Documentation: https://docs.wastewise.com
- API Reference: https://api.wastewise.com/docs

Last Updated: 2025-10-15
Version: 2.0
